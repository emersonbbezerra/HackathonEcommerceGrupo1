generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  STAFF
  ADMIN
}

model User {
  id         String  @id @default(uuid())
  first_name String
  last_name  String
  email      String  @unique
  image      String?
  password   String
  phone      String
  role       Role    @default(USER)

  sessions Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  id         String  @id @default(uuid())
  userId     String
  token      String?
  user_agent String?
  ip         String?
  active     Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, token])
  @@map("sessions")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  image       String?
  price       Float
  category    String
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  OrderItem   OrderItem[]

  @@map("products")
}

model Order {
  id              String        @id @default(uuid()) @map("order_id")
  customerName    String        @map("customer_name")
  customerPhone   String        @map("customer_phone")
  customerAddress String        @map("customer_address")
  items           OrderItem[]   @relation("OrderToOrderItem")
  totalPrice      Float         @map("total_price")
  orderStatus     OrderStatus   @map("order_status")
  orderDate       DateTime      @default(now()) @map("order_date")
  paymentMethod   PaymentMethod @map("payment_method")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String

  quantity Int   @map("quantity")
  price    Float @map("price")

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "OrderToOrderItem")
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PREPARING
  DELIVERING
  DELIVERED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
}
